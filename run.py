import asyncio
from environs import Env
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import requests
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

from app.handlers.start import start_router
from app.handlers.order_box import order_box_router
from app.handlers.storage_conditions import storage_conditions_router
from app.handlers.usage_rules import usage_rules_router
from app.handlers.contact_admin import contact_admin_router
from app.handlers.my_orders import my_orders_router

from config import API_URL
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


async def send_reminders(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π."""
    logging.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ send_reminders")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π
    response = requests.get(f"{API_URL}/contracts/expiring_in_14_days/")

    if response.status_code == 200:
        contracts = response.json()
        today = datetime.now().date()

        for contract in contracts:
            expiration_date = datetime.strptime(contract["expiration_date"], "%Y-%m-%d").date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π
            reminder_date = expiration_date - timedelta(days=14)
            logging.info(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç ID: {contract['id']} - –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiration_date}, –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞: {reminder_date}")

            if reminder_date == today:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
                logging.info(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç ID: {contract['id']} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
                owner_id = contract["owner_name"]
                user_response = requests.get(f"{API_URL}/users/{owner_id}")

                if user_response.status_code == 200:
                    user_data = user_response.json()
                    if user_data:
                        telegram_id = user_data.get("telegram_id")
                        if telegram_id:
                            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id: {telegram_id}")
                            message = (
                                f"‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n"
                                f"üì¶ –ó–∞–∫–∞–∑ ID: {contract['id']}\n"
                                f"üìç –ê–¥—Ä–µ—Å: {contract['place_address']}\n"
                                f"üß≥ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {contract['content']}\n\n"
                                f"‚ö†Ô∏è –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã —è—á–µ–π–∫–∏."
                            )
                            await bot.send_message(chat_id=telegram_id, text=message)
                            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    else:
                        logging.warning(f"Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_id}")
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {owner_id}: {user_response.status_code}")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {response.status_code}")


async def main():
    env = Env()
    env.read_env()
    TELEGRAM_BOT_TOKEN = env.str('TELEGRAM_BOT_TOKEN')
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_routers(start_router, order_box_router,
                       storage_conditions_router, usage_rules_router,
                       contact_admin_router, my_orders_router,
                       advertisement_router)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler = AsyncIOScheduler()
    scheduler = AsyncIOScheduler(timezone=timezone("Europe/Moscow"))
    scheduler.add_job(send_reminders, "cron", hour=20, minute=38, args=[bot])
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
