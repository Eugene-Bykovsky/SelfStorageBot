from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from .keyboards import start_keyboard, order_box_keyboard, warehouse_addresses_keyboard

router = Router()


class QuestionStates(StatesGroup):
    choosing_talk = State()
    writing_question = State()
    waiting_for_phone_number = State()


class OrderCourierStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_duration = State()


@router.message(F.text == "/start")
async def start_command(message: Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üôã‚Äç‚ôÇÔ∏è\n"
        "–•—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—â–µ–π –≤ —è—á–µ–π–∫–∞—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω–æ–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–≤–æ–∏—Ö –≤–µ—â–µ–π. –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –¥–æ–º –∏–ª–∏ –æ—Ñ–∏—Å –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ.–Ø—á–µ–π–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö: –ø—Ä–∏ –ø–µ—Ä–µ–µ–∑–¥–µ, –≤–æ –≤—Ä–µ–º—è —Ä–µ–º–æ–Ω—Ç–∞, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –≤–µ—â–µ–π, –∞—Ä—Ö–∏–≤–æ–≤ –∏–ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π..\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞—Ä–µ–Ω–¥—ã –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: "
        "[PDF](https://clck.ru/3FKLhp).\n\n"
        '–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω". –ò–Ω–∞—á–µ, –Ω–∞–∂–º–∏—Ç–µ "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω".',
        reply_markup=start_keyboard,
    )


@router.message(F.text == "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
async def disagree_command(message: Message):
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è"
    )


@router.message(F.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
async def agree_command(message: Message):
    main_menu_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å", callback_data="order_box")],
            [
                InlineKeyboardButton(
                    text="üóÑ –£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="storage_conditions"
                )
            ],
            [InlineKeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [
                InlineKeyboardButton(
                    text="üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_admin"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÉ –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º", callback_data="usage_rules"
                )
            ],
        ]
    )
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup)


@router.callback_query(F.data == "usage_rules")
async def usage_rules_handler(callback_query: CallbackQuery):
    usage_rules_text = (
        "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º:\n\n"
        "–ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å:\n"
        " - –õ–∏—á–Ω—ã–µ –≤–µ—â–∏\n"
        " - –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n"
        " - –ú–µ–±–µ–ª—å\n"
        " - –°–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏\n"
        "\n–ù–µ–ª—å–∑—è —Ö—Ä–∞–Ω–∏—Ç—å:\n"
        " - –õ–µ–≥–∫–æ–≤–æ—Å–ø–ª–∞–º–µ–Ω—è—é—â–∏–µ—Å—è –≤–µ—â–µ—Å—Ç–≤–∞\n"
        " - –¢–æ–∫—Å–∏—á–Ω—ã–µ –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        " - –ñ–∏–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∞\n"
        " - –ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
    )

    await callback_query.message.answer(usage_rules_text)
    await callback_query.answer()


@router.callback_query(F.data == "contact_admin")
async def contact_admin_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏"
    )
    await state.set_state(QuestionStates.waiting_for_phone_number)
    await callback_query.answer()


@router.message(QuestionStates.waiting_for_phone_number)
async def phone_number_handler(message: Message, state: FSMContext):
    user_phone = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ, –æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞")
    await state.clear()


@router.callback_query(F.data == "storage_conditions")
async def storage_conditions_handler(callback_query: CallbackQuery):
    tariff_message = (
        "–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É —è—á–µ–µ–∫:\n\n"
        "1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: –û–±—ä–µ–º –¥–æ 1 –º¬≥: 100 —Ä./–¥–µ–Ω—å\n"
        "2. –°—Ç–∞–Ω–¥–∞—Ä—Ç: –û–±—ä–µ–º 1-5 –º¬≥: 300 —Ä./–¥–µ–Ω—å\n"
        "3. –ü—Ä–µ–º–∏—É–º: –û–±—ä–µ–º –±–æ–ª—å—à–µ 5 –º¬≥: 500 —Ä./–¥–µ–Ω—å\n"
    )
    await callback_query.message.answer(tariff_message)
    await callback_query.answer()


@router.callback_query(F.data == "order_box")
async def order_box_handler(callback_query: CallbackQuery):
    order_box_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìç –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤", callback_data="warehouse_addresses"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞", callback_data="order_courier"
                )
            ],
        ]
    )
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=order_box_markup
    )
    await callback_query.answer()


@router.callback_query(F.data == "warehouse_addresses")
async def warehouse_addresses_handler(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:", reply_markup=warehouse_addresses_keyboard
    )
    await callback_query.answer()


@router.callback_query(
    F.data.in_(["address_1", "address_2", "address_3", "address_4", "address_5"])
)
async def address_handler(callback_query: CallbackQuery):
    await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ, –æ–∂–∏–¥–∞–µ–º –í–∞—Å –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É")
    await callback_query.answer()


@router.callback_query(F.data == "order_courier")
async def order_courier_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await callback_query.answer()
    await state.set_state(OrderCourierStates.waiting_for_phone)


@router.message(OrderCourierStates.waiting_for_phone)
async def phone_input(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å")
    await state.set_state(OrderCourierStates.waiting_for_address)


@router.message(OrderCourierStates.waiting_for_address)
async def address_input(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (–≤ –¥–Ω—è—Ö)")
    await state.set_state(OrderCourierStates.waiting_for_duration)


@router.message(OrderCourierStates.waiting_for_duration)
async def duration_input(message: Message, state: FSMContext):
    await state.update_data(duration=message.text)

    user_data = await state.get_data()
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
        f"–ê–¥—Ä–µ—Å: {user_data['address']}\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {user_data['duration']} –¥–Ω–µ–π\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"
    )
    await state.clear()


@router.callback_query(F.data == "my_orders")
async def my_orders_handler(callback_query: CallbackQuery):
    orders = [
        {"id": 1, "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1", "end_date": "2023-12-31"},
        {"id": 2, "address": "—É–ª. –û–±—Ä–∞–∑—Ü–æ–≤–∞—è, –¥. 2", "end_date": "2024-01-15"},
    ]

    for order in orders:
        order_text = (
            f"–ó–∞–∫–∞–∑ ID: {order['id']}\n"
            f"–ê–¥—Ä–µ—Å: {order['address']}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {order['end_date']}\n"
        )

        order_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å QR-–∫–æ–¥ –∫ —Ç–æ–≤–∞—Ä—É",
                        callback_data=f'request_qr_{order["id"]}',
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        callback_data=f'order_details_{order["id"]}',
                    )
                ],
            ]
        )

        await callback_query.message.answer(order_text, reply_markup=order_markup)

    await callback_query.answer()


@router.callback_query(F.data.startswith("order_details_"))
async def order_details_handler(callback_query: CallbackQuery):
    order_id = int(callback_query.data.split("_")[2])

    orders = {
        1: {
            "tariff": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "end_date": "2023-12-31",
            "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1",
        },
        2: {
            "tariff": "–ü—Ä–µ–º–∏—É–º",
            "end_date": "2024-01-15",
            "address": "—É–ª. –û–±—Ä–∞–∑—Ü–æ–≤–∞—è, –¥. 2",
        },
        3: {
            "tariff": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
            "end_date": "2024-01-15",
            "address": "—É–ª. –ö–æ–ª–µ—Å–Ω–∏–∫–æ–≤–∞, –¥. 8",
        },
    }

    if order_id in orders:
        order = orders[order_id]
        current_date = datetime.now().date()
        end_date = datetime.strptime(order["end_date"], "%Y-%m-%d").date()
        remaining_days = (end_date - current_date).days

        details_text = (
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ID: {order_id}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {order['tariff']}\n"
            f"–û—Å—Ç–∞–≤—à–∏–π—Å—è —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {remaining_days} –¥–Ω–µ–π\n"
            f"–ê–¥—Ä–µ—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è: {order['address']}\n"
        )

        await callback_query.message.answer(details_text)

    await callback_query.answer()


@router.callback_query(F.data.startswith("request_qr_"))
async def courier_order_handler(callback_query: CallbackQuery):
    image_url = "https://avatars.mds.yandex.net/i?id=55981026a1aba60200c3c8fd7c3ca02f977919dd-13217315-images-thumbs&n=13"
    await callback_query.message.answer_photo(photo=image_url, caption="–í–∞—à QR-–∫–æ–¥")
    await callback_query.answer()
